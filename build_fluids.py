import json
import os

# --- Configuration ---
CONFIG_FILE = "fluids.config.json"
BP_PATH = "BP fluids"
RP_PATH = "RP fluids"

# --- Main Compiler Logic ---

def read_config():
    """Reads and returns the fluid definitions from the config file."""
    print(f"Reading configuration from '{CONFIG_FILE}'...")
    try:
        with open(CONFIG_FILE, "r") as f:
            config = json.load(f)
            print(f"Found {len(config.get('fluids', []))} fluid definitions.")
            return config.get("fluids", [])
    except FileNotFoundError:
        print(f"Error: Configuration file '{CONFIG_FILE}' not found.")
        print("Please create it based on the COMPILER_DESIGN.md specification.")
        return []
    except json.JSONDecodeError:
        print(f"Error: Invalid JSON in '{CONFIG_FILE}'. Please check the file for syntax errors.")
        return []

def generate_universal_assets():
    """
    Generates the universal fluid geometry and permutation files.
    This is a placeholder for the logic from our existing generate_fluid_assets.py.
    """
    print("\nGenerating universal fluid assets...")
    # (We will integrate the full generation logic here later)
    print("  -> Generating fluid_geometry.json...")
    print("  -> Generating fluid_block_permutations.json...")
    print("Universal assets generated.")

def generate_per_fluid_files(fluids):
    """Generates all the necessary files for each defined fluid."""
    if not fluids:
        return
    print("\nGenerating per-fluid files...")
    for fluid in fluids:
        print(f"  -> Processing fluid: {fluid['id']}")
        # (We will add file generation logic here)
        pass
    print("Per-fluid files generated.")

def generate_js_registration(fluids):
    """Generates the JavaScript file that registers all the fluid queues."""
    if not fluids:
        return
    print("\nGenerating JavaScript registration file...")
    
    # Ensure the target directory exists
    output_dir = os.path.join(BP_PATH, "scripts", "generated")
    os.makedirs(output_dir, exist_ok=True)
    output_path = os.path.join(output_dir, "register_fluids.js")

    # Create the file content
    content = [
        "// ---- THIS FILE IS AUTO-GENERATED BY build_fluids.py. DO NOT EDIT. ----",
        'import { FluidQueue } from "../queue";',
        'import { fluidUpdate } from "../API";',
        "",
        "export const Queues = {",
    ]
    
    for fluid in fluids:
        fluid_id = f"lumstudio:{fluid['id']}"
        tick_delay = fluid.get('tickDelay', 20)
        content.append(f'  "{fluid_id}": new FluidQueue(fluidUpdate, "{fluid_id}", {tick_delay}),')

    content.extend([
        "};",